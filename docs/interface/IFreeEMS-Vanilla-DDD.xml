<?xml version="1.0" encoding="UTF-8"?>
<FreeEMS-DDD>
	<DDL-Version>0.0.0</DDL-Version>
	<InterfaceVersion>0.0.0 IFreeEMS Vanilla</InterfaceVersion>
	<Notes>
		<Note>
			<Title>Data Packing</Title>
			<Content>Please note, if your embedded system compiler produces unpacked structs you must either specifiy the padding explicitly, or stuff the data into a packed format before sending.</Content>
		</Note>
		<Note>
			<Title>Payload ID Length</Title>
			<Content>Length refers to the fields specified in contents. See hasData to know if a non-specific argument should be passed. If hasData is true, then at least one byte of data shall be expected.</Content>
		</Note>
		<Note>
			<Title>Another Note</Title>
			<Content>Makes it obvious what the structure will be like.</Content>
		</Note>
	</Notes>
	<ErrorIDs>
		<ErrorID>
			<ID>0x1000</ID>
			<Name>fakeError</Name>
			<Description>Just an example of how an error might look in the XML.</Description>
		</ErrorID>
		<ErrorID>
			<ID>0x0666</ID>
			<Name>satanicError</Name>
			<Description>Even more obvious that there will be more than one error.</Description>
		</ErrorID>
	</ErrorIDs>
	<PayloadIDs>
		<PayloadID>
			<ID>0xDA5E</ID>
			<Name>retrieveListOfLocationIDs</Name>
			<Status>Current</Status>
			<Description>Copy/Paste from OO doc when this becomes final</Description>
			<Length>3</Length>
			<hasData>False</hasData>
			<Contents>
				<Content name="listType" type="uint8" />
				<Content name="blockDetailsMask" type="uint16" />
			</Contents>
		</PayloadID>
		<PayloadID>
			<ID>0xDA5F</ID>
			<Name>listOfLocationIDs</Name>
			<Status>Current</Status>
			<Description>Copy/Paste from OO doc when this becomes final</Description>
			<Length>0</Length>
			<hasData>True</hasData>
			<Contents>
			</Contents>
		</PayloadID>
	</PayloadIDs>
	<Structures>
		<Structure>
			<Name>mainTable</Name>
			<Description>The main table format used (mostly?) for load/RPM lookups of engine running parameters.</Description>
			<!-- #define MAINTABLE_RPM_LENGTH 24			/* How many cells on the X axis */  -->
			<!-- #define MAINTABLE_LOAD_LENGTH 19		/* How many cells on the Y axis */ -->
			<!-- #define MAINTABLE_MAX_RPM_LENGTH 27		/* How many cells on the X axis max */ -->
			<!-- #define MAINTABLE_MAX_LOAD_LENGTH 21	/* How many cells on the Y axis max */ -->
			<!-- #define MAINTABLE_MAX_MAIN_LENGTH 462	/* 924B 462 shorts maximum main table length */ -->
			<Members>
				<Member>
					<Name>RPMLength</Name>
					<Description>The length of the RPM axis array</Description>
					<Type>uint16</Type>
					<!-- Need some sort of min/max value thing with inheritance so the instances can modify if required. Instances should only be able to narrow the range, though. -->
				</Member>
				<Member>
					<Name>LoadLength</Name>
					<Description>The length of the Load axis array</Description>
					<Type>uint16</Type>
					<!-- Need some sort of min/max value thing with inheritance so the instances can modify if required. Instances should only be able to narrow the range, though. -->
				</Member>
				<Member>
					<Name>RPM</Name>
					<Description>The array of RPM (X) axis values</Description>
					<Type>uint16 array[MAINTABLE_MAX_RPM_LENGTH]</Type>
					<!-- I don't know how to structure the type field because each type has a different structure. Perhaps have a "type" field with "array" or "primitive" or whatever, and then a "typeSpecifiers" field with "array" or "primitive" or whatever sub elements and each with their own structure and each optional. If array is specified as the type, look for its structure to be populared, thoughts? -->
				</Member>
				<Member>
					<Name>Load</Name>
					<Description>The array of Load (Y) axis values</Description>
					<Type>uint16 array[MAINTABLE_MAX_LOAD_LENGTH]</Type>
					<!-- I don't know how to structure the type field because each type has a different structure. Perhaps have a "type" field with "array" or "primitive" or whatever, and then a "typeSpecifiers" field with "array" or "primitive" or whatever sub elements and each with their own structure and each optional. If array is specified as the type, look for its structure to be populared, thoughts? -->
				</Member>
				<Member>
					<Name>Table</Name>
					<Description>The table as an array of values</Description>
					<Type>uint16 array[MAINTABLE_MAX_MAIN_LENGTH]</Type>
					<!-- I don't know how to structure the type field because each type has a different structure. Perhaps have a "type" field with "array" or "primitive" or whatever, and then a "typeSpecifiers" field with "array" or "primitive" or whatever sub elements and each with their own structure and each optional. If array is specified as the type, look for its structure to be populared, thoughts? -->
				</Member>
			</Members>
		</Structure>
		<Structure>
			<Name>twoDTableUS</Name>
			<Description>A two dimensional table of unsigned shorts for both values and indices. Currently the only table other than main that is used.</Description>
			<!-- #define TWODTABLEUS_LENGTH 16 -->
			<Members>
				<Member>
					<Name>Axis</Name>
					<Description>Array of axis values</Description>
					<Type>uint16 array[TWODTABLEUS_LENGTH]</Type>
					<!-- I don't know how to structure the type field because each type has a different structure. Perhaps have a "type" field with "array" or "primitive" or whatever, and then a "typeSpecifiers" field with "array" or "primitive" or whatever sub elements and each with their own structure and each optional. If array is specified as the type, look for its structure to be populared, thoughts? -->
				</Member>
				<Member>
					<Name>Values</Name>
					<Description>Array of value values</Description>
					<Type>uint16 array[TWODTABLEUS_LENGTH]</Type>
					<!-- I don't know how to structure the type field because each type has a different structure. Perhaps have a "type" field with "array" or "primitive" or whatever, and then a "typeSpecifiers" field with "array" or "primitive" or whatever sub elements and each with their own structure and each optional. If array is specified as the type, look for its structure to be populared, thoughts? -->
				</Member>
			</Members>
		</Structure>
	</Structures>
	<Instances>
		<Instance>
			<!-- ve main -->
			<!-- lambda -->
			<!-- engineTempEnrichmentTableFixed -->
			<!-- engineTempEnrichmentTablePercent -->
			<!-- primingVolumeTable -->
			<!-- injectorDeadTimeTable -->
			<!-- postStartEnrichmentTable -->
			<!-- dwellDesiredVersusVoltageTable -->
			<!-- dwellMaxVersusRPMTable -->
		</Instance>
	</Instances>
</FreeEMS-DDD>