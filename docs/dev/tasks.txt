tidy everything up

-1. Refactor all vars to A be consistent, readable, meaningful B be inside a massive struct in an intelligent order padded by a string to be 4k or some other clean amount.
1. Add checking of preprocessed C files for 8 bit notted literals. grep -rn "~0x[0-9][0-9];" src should return 0 lines.
1.5 ditto, check for use of "&= !"
2. Do basic range checking and ensure that dwell overlap functions correctly. 
3. Because it is meaningless to have 100% duty dwell, ensure that some brief period is always allowed for spark to occur in.
5. Add ADC averaging code (stabilises readings) in the calculation section
12. Add rpm/accel/change in accel prediction to periods etc, and do per tooth.
18. Clean up headers more by splitting and rearranging and grouping
19. Check for volatile stuff that isn't labeled as such
20. Add staged atmospheric calculations/corrections with if then else if options (% load, manual correction, no correction, fixed correction, dashpot via standard ADC, etc and/or all/some of them)
21. Add staged delta/transient calculations/corrections with if then else if options (WW1, WW2, TPS based, MAP based, RPM based, load based, etc and/or all/some of them)
22. Add EGO Lambda correction calculations/corrections option block
32. Add ign correction for knock level/frequency/history
33. Add ign adjustment for anti lag
34. Add ign adjustment for launch control
35. Add option for fixed timing
38. Add ign adjustment for idle speed control
39. Add fuel enrichment based on knock.
40. Add fuel correction based on fuel temperature and or pressure and or dashpot or flexfuel sensor
43. Add coolant based RPM limiting by using tables for each RPM limit such that it is always done that way
44. Think about how to implement priming pulses
45. Think about how to implement post start enrich
46. Think about how to implement other time based things such as knock, fuel pump, etc
